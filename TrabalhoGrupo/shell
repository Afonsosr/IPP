# -*- coding:utf-8 -*-
'''
Adapted on 01/03/2023

@author: valves
@author: ferraz
'''
import sympy as sp
from cmd import Cmd
from ProteinasWindow import ProteinasWindow
from ProteinasEngine import ProteinasEngine
import random
import re
from itertools import combinations_with_replacement
import fontstyle

class ProteinasShell(Cmd):
    intro = 'Interpretador de comandos para jogo das proteínas. Escrever help ou ? para listar os comandos disponíveis.\n'
    prompt = 'Proteínas> '

    def descompactar(arg):
            nums=["0","1","2","3","4","5","6","7","8","9"]
            arg = arg.upper()
            lista_arg = list(arg)
            num_args = len(lista_arg)        
            i = 0
            s = ""
            urep = ""
            
            #for elem in lis
            while i < num_args -1  :
                if arg[i+1] in nums and arg[i] != ")":     # funcao para descompactar sequencia descompactada
                    s = s + arg[i]*int(arg[i+1])
                    
                    i += 2
                elif arg[i] == "(":
                    while arg[i] != ")":
                        i += 1
                        urep = urep + arg[i]
                        urep = urep.replace(")","")
                    s = s +  urep*int(arg[i+1])

                    urep = ""
                    i += 2
                else:
                    s = s + arg[i]
                    i += 1
            if lista_arg[-1] not in nums:
                s += lista_arg[-1]
            return s



        

    def do_seq(self, arg):
        " - Sem argumentos imprime a sequência, se tiver um argumento define a sequência constituída por A's e B's: SEQ sequência \n"
        try:
            nums=["0","1","2","3","4","5","6","7","8","9"]
            ax = 0
            lista_arg = arg.split()
            num_args = len(lista_arg)
            if num_args == 0:
                print("SEQ: ", eng.sequencia)
            elif num_args == 1:
                for elem in nums:
                    if elem in arg:
                        ax += 1
                if ax != 0:
                    eng.setseq(ProteinasShell.descompactar(arg))               # zona de descompactar sequencia compactada
                    print("A sequência foi atualizada")
                    print("SEQ: ", eng.sequencia)
                else:
                    seq = lista_arg[0].upper()  # assim forço a que a string esteja em maiúsculas
                    if eng.seq_valida(seq):  # para verificar se a sequência é válida
                        eng.setseq(seq)
                        print("A sequência foi atualizada")
                        print()
                    else:
                        print("A sequência tem carateres inválidos. Por favor, reinsira uma sequência válida.")
            else:
                print("Número de argumentos inválido!")
        except BaseException as e:
            print("Erro: ao executar o comando SEQ:" , str(e))



        
    def do_dobrar(self, arg):
        " - Comando que recebe como argumento uma string com instruções (FED) que serão utilizadas para dobrar a sequência: DOBRAR instruções \n"
        try:
            eng.dobrar(eng.coordenadas,arg)
            if ProteinasEngine.validacao(self,eng.sequencia,eng.coordenadas):   #faz o dobrar e diz ao utilizador se a configuracao formada é valida ou nao. Não a arranja, so avisa. para arranjar, terá que ser no reparar
                print("As coordenadas foram atualizadas")
            else:
                print("Saiba que o comando DOBRAR acabou de criar uma proteína de configuração inválida.")
    
        except BaseException as e:
            print("Erro: ao fazer o DOBRAR:" , str(e))    
                
	
    def do_coords(self, arg):    
        " - Sem argumentos imprime as coordenadas de cada caratere da sequência, se tiver um argumento define a posição (X,Y) de cada caratere da sequência: COORDS posições \n"
        try:    
            lista_arg = arg.split()
            num_args = len(lista_arg)
            if num_args == 0:  # imprimir a lista de coordenadas
                coordenadas = eng.getcoord()
                print("COORDENADAS: ", coordenadas)
            elif num_args == 1:
                coordenadas = lista_arg[0]
                if eng.coord_validas(coordenadas):  # para verificar se a string de coordenadas é válida
                    eng.setcoord(coordenadas)
                    print("As coordenadas foram atualizadas")
                else:
                    print("A string de coordenadas tem carateres inválidos, o formato é (x,y)...")
            else:
                print("Número de argumentos inválido!")
        except BaseException as e:
            print("Erro: ao fazer o COORDS:", str(e))
        

    def do_validar(self, arg):    
            " - Comando que valida a configuração atual da proteína; este comando deverá imprimir as palavras SIM ou NAO caso a configuração seja válida: VALIDAR \n"
            try:
                lista_arg = arg.split()
                num_args = len(lista_arg)
                if num_args == 0:
                    if eng.validacao(eng.sequencia,eng.coordenadas):      #faz a validacao completa da sequencia de letras e de coordenadas no engine
                        print(fontstyle.apply('SIM', 'Italic'))
                        
                    else:                                           # os resultados aparecerao em italico, tal como foi pedido
                        print(fontstyle.apply('NAO', 'Italic'))
                        
                else:
                    print("O comando validar nao leva argumentos!")
            except BaseException as e:
                print("Erro ao fazer o validar!", str(e))




    def do_compactar(self, arg): 
        try:
            lista_arg = list(arg)
            num_args = len(lista_arg)
            if num_args == 0:
                print("Número de argumentos inválido!")
            else:
                def repl(m):
                    opening = m.group(1)
                    first = m.group(2)
                    repetitions = m.group(3)
                    closing = m.group(4)
                    wrapper_repeat = m.group(5)
                    repeats = 1 + len(repetitions) // len(first)    #funcao encontrada na internet que compacta ao maximo uma sequencia de letras
                    if len(first) > 1:
                        first = '(' + first + ')'                   
                    if opening and wrapper_repeat:
                        # simplify
                        repeats = repeats * int(wrapper_repeat)
                        return first + str(repeats)
                    return opening + first + str(repeats) + closing + wrapper_repeat

                seq2 = '';
                while seq2 != arg:
                    seq2 = arg                                          
                    arg = re.sub(r'(\(?)([^\d()]+)(\2+)(\)?)(\d*)', repl, seq2)
            return print(arg)                                    # a sequencia compactada nao fica guardada, é so um output de informacao
        except BaseException as e:
            print("Erro: ao fazer o COMPACTAR:", str(e))

	
    def do_gravar(self, arg):    
        " - Comando invocado com um argumento que será o nome de um ficheiro onde a aplicação deverá armazenar a sequência e as coordenadas: GRAVAR nomef.txt \n"
        try:
            fp = open(arg, "w")
            for e in range(0,len(eng.coordenadas)):
                fp.write(str(eng.sequencia[e]) + " -> " + str(eng.coordenadas[e]) + ";")
                fp.write("\n")
            fp.close()                                 # gravacao de ficheiro em formato txt
            print ("Ficheiro atualizado com sucesso!")
        except BaseException as e:
            print("Erro: ao fazer o GRAVAR:", str(e))
    
	
    def do_ler(self, arg):    
        " - Comando invocado com um argumento que será o nome de um ficheiro de onde a aplicação deverá ler a sequência e as coordenadas: LER nomef.txt \n"
        try:
            fp = open(arg, "r")
            for e in range(0,len(eng.coordenadas)):
                print("")
                print(str(eng.sequencia[e]) + " -> " + str(eng.coordenadas[e]) + ";")
                print("")
            fp.close()                          # faz leitura de ficheiro em formato txt
        except BaseException as e:
            print("Erro: ao fazer o LER:", str(e))		

    def do_energia(self, arg):    
        " - Comando que imprime a energia da configuração atual caso esta seja válida; este comando pode ser invocado sem argumentos ou com 3 argumentos: ENERGIA e1 e2 e3 \n"
        try:
            eng.energia(eng.coordenadas,arg)      # medicao da energia da sequencia. é feita no engine
        except BaseException as e:
            print("Erro: ao fazer o ENERGIA:", str(e))
    
#################################################################################################        	
    def do_reparar(self, arg):    
        " - Comando que deverá reparar uma configuração caso esta seja inválida achando a configuração mais próxima que seja válida: REPARAR \n"

        try:  

            lista_arg = list(eng.sequencia)          # funcao que repara um conjunto de coordenadas invalida
                                                    # se houver lacunas de pontos entre duas coodenadas, cria um conjunto de pontos que as ligue às duas         
                                                    # so considera lacunas horizontais ou verticais em todas as direcoes, não lacunas obliquas
            i = 0                                                    
            n = 0
            listaOriginal = eng.coordenadas[:]
            while n < len(listaOriginal):                  
                a = [listaOriginal[n][0],listaOriginal[n][1]+1]   
                b = [listaOriginal[n][0],listaOriginal[n][1]-1]
                c = [listaOriginal[n][0]+1,listaOriginal[n][1]]     
                d = [listaOriginal[n][0]-1,listaOriginal[n][1]]
                lisaux=[a,b,c,d] 
                if n < len(listaOriginal)-1:
                    if listaOriginal[n+1] not in lisaux:
                        if listaOriginal[n+1][1] > listaOriginal[n][1] and listaOriginal[n+1][1] - listaOriginal[n][1] > 1: 
                            novaCoord=[listaOriginal[n+1][0],(listaOriginal[n+1][1])-1]
                            while novaCoord[1] != listaOriginal[n][1]:
                                eng.coordenadas.append(novaCoord)
                                i += 1
                                novaCoord=[novaCoord[0],novaCoord[1]-1]
                        
                        if listaOriginal[n+1][1] < listaOriginal[n][1] and abs(listaOriginal[n][1]) - abs(listaOriginal[n+1][1])>1:
                            novaCoord=[listaOriginal[n+1][0],listaOriginal[n+1][1]+1]
                            while novaCoord[1] != listaOriginal[n][1]:
                                eng.coordenadas.append(novaCoord)    
                                i += 1
                                novaCoord=[novaCoord[0],novaCoord[1]+1]

                        if listaOriginal[n+1][0] > listaOriginal[n][0] and listaOriginal[n+1][0] - listaOriginal[n][0]>1:
                            novaCoord=[listaOriginal[n+1][0]-1,listaOriginal[n+1][1]]
                            while novaCoord[0] != listaOriginal[n][0]:
                                eng.coordenadas.append(novaCoord)
                                i += 1
                                novaCoord=[novaCoord[0]-1,novaCoord[1]]
                            print(listaOriginal)
                        if listaOriginal[n+1][0] < listaOriginal[n][0] and abs(listaOriginal[n][0]) - abs(listaOriginal[n+1][0])>1:
                            novaCoord=[listaOriginal[n+1][0]+1,listaOriginal[n+1][1]]
                            while novaCoord[0] != listaOriginal[n][0]:
                                eng.coordenadas.append(novaCoord)                   
                                i += 1                                              
                                novaCoord=[novaCoord[0]+1,novaCoord[1]]             
                n += 1

                lista_sem_repeticoes = list(set(tuple(sublista) for sublista in eng.coordenadas))
                eng.coordenadas = [list(sublista) for sublista in lista_sem_repeticoes]            
                eng.coordenadas = sorted(eng.coordenadas, key=lambda k: [k[0], k[1]]) 
               
              
                while i > 0:
                    lista_arg.append(random.choice(['A', 'B']))
                    i-=1                             # ver quantas letras faltam para len(coordenadas)==len(sequencia) e só depois adicionar em random esse nº de letras
                s= ''.join(lista_arg)                # Isto para garantir que a sequencia final corresponde ao numero de coordenadas final
                while len(eng.coordenadas) != len(list(s)):
                    s = s.rstrip(s[-1])
                    
                eng.setseq(s)#coords(0,0)(3,0)(3,3)(0,3)(0,6)(3,6)(3,4)(7,4)


                print("As coordenadas e a sequência foram atualizadas")
        
        except BaseException as e:
            print("Erro: ao fazer o REPARAR:", str(e))

###############################################################################################      
	
    def do_proclocal(self, arg=""):    
        " - Comando que deverá encontrar uma configuração vizinha da configuração atual com energia mais baixa: PROCLOCAL \n"
        try: 
            sequencia = eng.getseq()
            coords = eng.convert_coords_to_list_of_list(eng.getcoord())
            coords_originais_save = coords.copy()
            if arg == "":
                
                ponto_de_rotacao = coords[1]
                x,y = ponto_de_rotacao[0], ponto_de_rotacao[1]
                lista_pontos_possiveis_first = [[x-1,y],[x,y+1],[x+1,y],[x,y-1]]
                lista_pontos_first = []
                for ponto in lista_pontos_possiveis_first:
                    if ponto not in coords[1:-1]:
                        lista_pontos_first.append(ponto)   # aqui verificamos se ao alterarmos a posicao de uma das pontas da sequencia
                                # conseguimos diminuir a sua energia

                ponto_de_rotacao = coords[-2]
                x,y = ponto_de_rotacao[0], ponto_de_rotacao[1]
                lista_pontos_possiveis_last = [[x-1,y],[x,y+1],[x+1,y],[x,y-1]]
                lista_pontos_last = []
                for ponto in lista_pontos_possiveis_last:
                    if ponto not in coords[1:-1]:
                        lista_pontos_last.append(ponto)
                
                
                save = []
                energia_min = 99999999999
                for ponto_first in lista_pontos_first:
                    for ponto_last in lista_pontos_last:
                        if ponto_first != ponto_last:
                            coords_possiveis = [ponto_first]
                            for ponto in coords[1:-1]:
                                coords_possiveis.append(ponto)
                            coords_possiveis.append(ponto_last)
                            energia = eng.energia(coords_possiveis,arg)
                            if energia < energia_min:
                                save = [[sequencia,coords_possiveis.copy()]]   
                                energia_min = energia
                            elif energia == energia_min:
                                save.append([sequencia,coords_possiveis.copy()])
                            
                sh.do_ver("")
                input()
                for config in save:
                    eng.setcoord(eng.convert_list_of_list_to_coords(config[-1]))
                    sh.do_ver("")
                    input()
                eng.setcoord(eng.convert_list_of_list_to_coords(coords_originais_save))

            if "ponto" in arg:
                num_ponto = int(arg.split()[-1])
                ponto_anterior = coords[num_ponto-2]
                ponto_posterior = coords[num_ponto]
                distancia = float((sp.sqrt((ponto_posterior[-1]-ponto_anterior[-1])*2 + (ponto_posterior[0]-ponto_anterior[0])*2)).evalf())
                if "1.414213562" in str(distancia):
                    lista_pontos_possiveis = [[ponto_anterior[0],ponto_posterior[-1]],[ponto_posterior[0],ponto_anterior[-1]]]
                    lista_pontos = []
                    for ponto in lista_pontos_possiveis:
                        if ponto not in coords[:num_ponto-1] and ponto not in coords[num_ponto:]:
                            lista_pontos.append(ponto)
                    
                    save = []
                    energia_min = 99999999999
                    for ponto in lista_pontos:
                        coords_possiveis = coords
                        coords_possiveis[num_ponto-1] = ponto
                        energia = eng.energia(coords_possiveis,arg)
                        if energia < energia_min:
                            save = [[sequencia,coords_possiveis.copy()]]
                            energia_min = energia
                        elif energia == energia_min:
                            save.append([sequencia,coords_possiveis.copy()])
                    sh.do_ver("")
                    input()
                    for config in save:
                        eng.setcoord(eng.convert_list_of_list_to_coords(config[-1]))
                        sh.do_ver("")
                        input()
                    eng.setcoord(eng.convert_list_of_list_to_coords(coords_originais_save))
                    

                elif distancia == 2:
                    print("O ponto escolhido não tem posições de menor energia")
        except BaseException as e:
            print("Erro: ao fazer o PROCLOCAL:", str(e))
        
	
    def do_procurar(self, arg):    
            " - Comando que deverá encontrar a melhor configuração possível (i.e., a configuração com energia mais baixa) num espaço de tempo aceitável: PROCURAR \n"
            try:
                lista_arg = list(arg) 
                num_args = len(lista_arg)
                valido = False
                if num_args == 0:       #invocada sem argumentos, utiliza energia predefinida pelo programador
                    print("As energias usadas são e1 = -1, e2 = 0 e  e3 = 0")
                    new_coords, energia = eng.procura(eng.getseq(), -1, 0, 0)
                    valido = True
                elif num_args == 3:     #invocada sem argumentos, utiliza energia predefinida pelo programador
                    print(f"As energias usadas são e1 = {lista_arg[0]}, e2 = {lista_arg[1]} e e3 = {lista_arg[2]}")
                    new_coords, energia = eng.procura(eng.getseq(), int(lista_arg[0]), int(lista_arg[1]), int(lista_arg[2]))
                    valido = True
                else:
                    print("Número de argumentos inválido")
                
                if valido:      
                    eng.setcoord(eng.convert_list_of_list_to_coords(new_coords))
                    print("A melhor configuração encontrada é:", eng.convert_list_of_list_to_coords(new_coords), "com a energia", energia)
                
            except BaseException as e:
                print("Erro: ao fazer o PROCURAR:", str(e))
     	


    def do_ver(self, arg):    
        " - Comando para visualizar graficamente a configuração atual caso seja válida: VER  \n"
        try:
            if len(eng.getcoord()) > 0:
                for linha in eng.get_matriz_total():  # imprimir na consola toda a informação sobre a sequencia
                    print("%s - (%d,%d)" % (linha[0], linha[1], linha[2]))
                global janela  # pois pretendo atribuir um valor a um identificador global
                if janela is not None:  # pretendo criar uma nova janela para a área retangular, por isso é que apago a anterior, se existir.
                    del janela  # invoca o metodo destruidor de instancia __del__()
                cell_size = 50  # tamanho da quadricula em pixeis
                janela = ProteinasWindow(cell_size, eng.max_coord_x(), eng.min_coord_x(), eng.max_coord_y(), eng.min_coord_y()) 
                janela.mostraJanela(eng)
            else:
                print('Atenção: a lista de coordenadas está vazia!')
        except BaseException as e:
            print("Erro: ao mostrar a janela com o estado da sequência (gráfica):", str(e))
        pass
    
    def do_sair(self, arg):
        "Sair do programa Proteínas: sair"
        print('Obrigado por ter utilizado o Proteínas, espero que tenha sido útil!')
        return True


if __name__ == '__main__':
    eng = ProteinasEngine()
    janela = None
    sh = ProteinasShell()
    sh.cmdloop()
    
	
'''
para testar:

> seq BAAABABBBBBA
> coords (0,0)(1,0)(2,0)(2,-1)(3,-1)(3,0)(3,1)(4,1)(4,2)(3,2)(2,2)(2,1)
> ver

'''
